version: '3.8'

services:
    ### NGINX Server #########################################
    nginx:
        build:
            context: ./docker/nginx
            args:
                - DOCKER_LOCALHOST_SERVERNAME=${DOCKER_LOCALHOST_SERVERNAME}
        image: 127.0.0.1:5000/mpl-nginx:0.1.0
        container_name: mpl-nginx
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        volumes:
            - ./docker/nginx/logs/:/var/log/nginx
            #- ./docker/nginx/sites/:/etc/nginx/sites-available
            - ./docker/nginx/ssl/:/etc/nginx/ssl
            - .:/var/www/html
        ports:
            - "${DOCKER_NGINX_HOST_HTTP_PORT}:80"
            - "${DOCKER_NGINX_HOST_HTTPS_PORT}:443"
        networks:
            - "${DOCKER_NETWORK}"

    ### APP (php-fpm) ##############################################
    app:
        build:
            context: .
            dockerfile: ./docker/app/Dockerfile
        image: 127.0.0.1:5000/mpl-app:0.1.0
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        volumes:
            - ./docker/app/php.ini:/usr/local/etc/php/php.ini
            - ./docker/app/supervisor-logs:/var/log
            - .:/var/www/html:delegated
        expose:
            - "9000"
        networks:
            - "${DOCKER_NETWORK}"

    ### DB (MariaDB) ##############################################
    db:
        build:
            context: ./docker/mariadb
        image: 127.0.0.1:5000/mpl-db:0.1.0
        deploy:
            replicas: 1
            placement:
                constraints:
                    - "node.role == manager"
            restart_policy:
                condition: on-failure
        volumes:
            - db-data:/var/lib/mysql
            - ./docker/mariadb/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        environment:
            - MYSQL_USER=${DOCKER_MARIADB_USER}
            - MYSQL_PASSWORD=${DOCKER_MARIADB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=root
            - TZ=UTC
        ports:
            - "${DOCKER_MARIADB_PORT}:3306"
        networks:
            - "${DOCKER_NETWORK}"

    ### Redis ################################################
    redis:
        build: ./docker/redis
        image: 127.0.0.1:5000/mpl-redis:0.1.0
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        volumes:
            - ./docker/redis/data/:/data
        ports:
            - "${DOCKER_REDIS_PORT}:6379"
        networks:
            - "${DOCKER_NETWORK}"

    ### Adminer ###########################################
    adminer:
        build:
            context: ./docker/adminer
        image: 127.0.0.1:5000/mpl-adminer:0.1.0
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - ADMINER_DESIGN=flat
            - ADM_DEFAULT_SERVER=db
            - ADMINER_PLUGINS=
        ports:
            - "${DOCKER_ADM_PORT}:8080"
        networks:
            - "${DOCKER_NETWORK}"

    ### Mailhog ################################################
    mailhog:
        build: ./docker/mailhog
        image: 127.0.0.1:5000/mpl-mailhog:0.1.0
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        ports:
            - "${DOCKER_MAILHOG_PORT1}:1025"
            - "${DOCKER_MAILHOG_PORT2}:8025"
        networks:
            - "${DOCKER_NETWORK}"

    ### REDISWEBUI ################################################
    redis-webui:
        build:
            context: ./docker/redis-webui
        image: 127.0.0.1:5000/mpl-redis-webui:0.1.0
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        environment:
            - ADMIN_USER=${DOCKER_REDIS_WEBUI_USERNAME}
            - ADMIN_PASS=${DOCKER_REDIS_WEBUI_PASSWORD}
            - REDIS_1_HOST=redis
            - REDIS_1_PORT=${DOCKER_REDIS_WEBUI_CONNECT_PORT}
        networks:
            - "${DOCKER_NETWORK}"
        ports:
            - "${DOCKER_REDIS_WEBUI_PORT}:80"

networks:
    mpl: ## !!!the name of network should be the same as ${DOCKER_NETWORK} !!!
        driver: overlay
        ## custom name for network
        ## if omit the name would be something like `mpl_mpl`
        name: mpl

volumes:
    db-data:
        driver: local
