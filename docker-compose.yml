version: '3.8'

services:
    nginx-proxy:
        image: nginxproxy/nginx-proxy
        ports:
            - "${DOCKER_NGINX_HOST_HTTP_PORT}:80"
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
#            - ./docker/nginx/ssl/:/etc/nginx/certs
        networks:
            - "${DOCKER_NETWORK}"
#        environment:
#            - DHPARAM_GENERATION=false

    ### NGINX Server #########################################
    nginx:
        build:
            context: ./docker/nginx
            args:
                - DOCKER_LOCALHOST_SERVERNAME=${DOCKER_LOCALHOST_SERVERNAME}
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        volumes:
            - ./docker/nginx/logs/:/var/log/nginx
            #- ./docker/nginx/sites/:/etc/nginx/sites-available
            - ./docker/nginx/ssl/:/etc/nginx/certs
            - .:/var/www/html
        environment:
            - VIRTUAL_HOST=${DOCKER_LOCALHOST_SERVERNAME}
        networks:
            - "${DOCKER_NETWORK}"

    ### APP (php-fpm) ##############################################
    app:
        build:
            context: ./docker/app
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        volumes:
            - ./docker/app/php.ini:/usr/local/etc/php/php.ini
            - ./docker/app/supervisor-logs:/var/log
            - .:/var/www/html:delegated
        networks:
            - "${DOCKER_NETWORK}"

    ### DB (MariaDB) ##############################################
    db:
        build:
            context: ./docker/mariadb
        restart: always
        deploy:
            replicas: 1
            placement:
                constraints:
                    - "node.role == manager"
        volumes:
            - db-data:/var/lib/mysql
            - ./docker/mariadb/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        environment:
            - MYSQL_USER=${DOCKER_MARIADB_USER}
            - MYSQL_PASSWORD=${DOCKER_MARIADB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=root
            - TZ=UTC
            - MYSQL_DATABASE=mpl
        networks:
            - "${DOCKER_NETWORK}"

    ### Adminer ###########################################
    adminer:
        build:
            context: ./docker/adminer
        deploy:
            replicas: 1
        environment:
            - ADMINER_DESIGN=flat
            - ADM_DEFAULT_SERVER=db
            - ADMINER_PLUGINS=
            - VIRTUAL_HOST=adminer-${DOCKER_LOCALHOST_SERVERNAME}
            - VIRTUAL_PORT=8080
        networks:
            - "${DOCKER_NETWORK}"

    ### Mailhog ################################################
    mailhog:
        build: ./docker/mailhog
        deploy:
            replicas: 1
        volumes:
            - ./docker/mailhog/maildir:/home/mailhog/maildir
        environment:
            - VIRTUAL_HOST=mail-${DOCKER_LOCALHOST_SERVERNAME}
            - VIRTUAL_PORT=8025
#            - MH_STORAGE=maildir
#            - MH_MAILDIR_PATH=/home/mailhog/maildir/mails
             ## authentication: mpl:qwe123
#            - MH_AUTH_FILE=/home/mailhog/maildir/auth.txt
        # About command @see https://github.com/mailhog/MailHog/issues/187#issuecomment-733009406
        command: -invite-jim=1
        networks:
            - "${DOCKER_NETWORK}"

networks:
    mpl: ## !!!the name of network should be the same as ${DOCKER_NETWORK} !!!
        driver: "${DOCKER_NETWORK_DRIVER}"
        ## custom name for network
        ## if omit the name would be something like `mpl_mpl`
        name: mpl

volumes:
    db-data:
        external: true

